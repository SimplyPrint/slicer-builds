name: Generate visibility configuration files

on:
  workflow_dispatch:
  workflow_run:
    types:
      - completed
    workflows:
      - Build and Extract JSON

permissions:
  contents: write

env:
  version_file: def_visibility_versions.json

jobs:
  generate_defs_visibility:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1 # Can't commit to the same branch in parallel
      matrix:
        slicer:
          - OrcaSlicer
          - PrusaSlicer
          - BambuStudio
        build-type:
          - nightly
          - latest_release
        include:
          - slicer: OrcaSlicer
            repo: SoftFever/OrcaSlicer
          - slicer: PrusaSlicer
            repo: prusa3d/PrusaSlicer
          - slicer: BambuStudio
            repo: BambuLab/BambuStudio

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13

      - name: Install generate_defs_visibility cli tool
        run: |
          uv tool install ./generate_defs_visibility

      - name: Generate visibility configuration files
        env:
          OPENAI_API_KEY: ${{ secrets.SLICER_BUILDS_OPENAI_API_KEY }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Fetch artifacts
          git fetch origin slicer-config-artifacts
          # Checkout to artifact branch
          git switch slicer-config-artifacts
          cd ${{ matrix.slicer }}
      
          # Ensure the version file is initialized
          if ! [[ -e "${{ env.version_file }}" ]]; then
            echo "{}" > ${{ env.version_file }}
          fi
          
          # Get latest tags/hashes
          latest_release_tag=$(curl "https://api.github.com/repos/${{ matrix.repo }}/releases/latest" | jq '.tag_name' | xargs echo)
          latest_release_hash=$(curl "https://api.github.com/repos/${{ matrix.repo }}/commits/refs/tags/${latest_release_tag}" | jq '.sha' | xargs echo)
          latest_stored_tag=$(jq '.latest' ${{ env.version_file }} | xargs echo)
          head_hash=$(curl "https://api.github.com/repos/${{ matrix.repo }}/commits/HEAD" | jq '.sha' | xargs echo)
          
          echo latest_release_tag=$latest_release_tag
          echo latest_release_hash=$latest_release_hash
          echo latest_stored_tag=$latest_stored_tag
          echo head_hash=$head_hash
          
          if [[ "$latest_stored_tag" != "$latest_release_tag" ]]; then
            if [[ $head_hash == $latest_release_hash ]]; then
              echo "Latest release found at HEAD"
              latest_release_at_head=true
            fi
          else
            # Latest release has not changed, do not continue to build
            if [[ "${{ matrix.build-type }}" == "latest_release" ]]; then
              echo "The latest release has already been built. Exiting..."
              exit 0
            fi
          fi
          
          # If the commits are the same between latest and nightly, cancel the latest_release build. The nightly build will handle both cases
          if [[ "${{ matrix.build-type }}" == "latest_release" ]] && [[ "$latest_release_at_head" == "true" ]]; then
            echo "The latest release is at the HEAD of the repo. The nightly build will be used to generate the release files. Exiting..."
            exit 0
          fi
          
          if [[ "${{ matrix.build-type }}" == "nightly" ]]; then
            ref=HEAD
            folder_name=nightly
          else
            ref=refs/tags/$latest_release_tag
            folder_name=$latest_release_tag
          fi
          
          if ! [[ -d $folder_name ]]; then
            echo "The folder for the specified version does not exist"
            exit 1
          fi
          
          pushd $folder_name
            uvx generate-defs-visibility --slicer ${{ matrix.slicer }} --ref $ref
          popd
        
          # If handling a release, save it to its own folder
          if [[ "${{ matrix.build-type }}" == "latest_release" ]] || [[ "$latest_release_at_head" == "true" ]]; then
            # Update the version file
            jq --arg tag "$latest_release_tag" '.latest = $tag | .available += [$tag]' ${{ env.version_file }} > ${{ env.version_file }}.tmp && mv ${{ env.version_file }}.tmp ${{ env.version_file }}
          
            if [[ "$latest_release_at_head" == "true" ]]; then
              mkdir -p $latest_release_tag
              cp -rf nightly/conditional_visibility.json $latest_release_tag || true
            fi
          fi
          
          git add .
          
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update visibility configuration files for ${{ matrix.slicer }}"
            git push origin slicer-config-artifacts
          fi
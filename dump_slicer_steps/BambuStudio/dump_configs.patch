diff --git a/src/libslic3r/Format/OBJ.cpp b/src/libslic3r/Format/OBJ.cpp
index d54a66f..694cf2d 100644
--- a/src/libslic3r/Format/OBJ.cpp
+++ b/src/libslic3r/Format/OBJ.cpp
@@ -18,7 +18,7 @@
 
 //Translation
 #include "I18N.hpp"
-#define _L(s) Slic3r::I18N::translate(s)
+#define _L(s) s/*Slic3r::I18N::translate(s)*/
 
 namespace Slic3r {
 
diff --git a/src/libslic3r/PrintConfig.cpp b/src/libslic3r/PrintConfig.cpp
index 287d68c..010c9af 100644
--- a/src/libslic3r/PrintConfig.cpp
+++ b/src/libslic3r/PrintConfig.cpp
@@ -11,6 +11,8 @@
 #include <boost/lexical_cast.hpp>
 #include <boost/log/trivial.hpp>
 #include <boost/thread.hpp>
+#include <boost/dll/runtime_symbol_info.hpp>
+#include <boost/property_tree/json_parser.hpp>
 
 #include <float.h>
 
@@ -522,6 +524,196 @@ PrintConfigDef::PrintConfigDef()
     assign_printer_technology_to_unknown(this->options, ptFFF);
     this->init_sla_params();
     assign_printer_technology_to_unknown(this->options, ptSLA);
+    this->dump_to_json();
+}
+
+namespace {
+template<typename T>
+void put_array(boost::property_tree::ptree& pt, const std::string& key, const std::vector<T>& values)
+{
+    auto& arr_pt = pt.put_child(key, boost::property_tree::ptree());
+    for (auto val : values)
+        arr_pt.add("", val);
+}
+}
+
+void PrintConfigDef::dump_to_json()
+{
+    using boost::property_tree::ptree;
+
+    static std::map<ConfigOptionType, std::string> type_map = {
+        { coFloat, "float" },
+        { coFloats, "floats" },
+        { coInt, "int" },
+        { coInts, "ints" },
+        { coString, "string" },
+        { coStrings, "strings" },
+        { coPercent, "percent" },
+        { coPercents, "percents" },
+        { coFloatOrPercent, "floatorpercent" },
+        { coFloatsOrPercents, "floatorpercents" },
+        { coPoint, "point" },
+        { coPoints, "points" },
+        { coPoint3, "point3" },
+        { coBool, "bool" },
+        { coBools, "bools" },
+        { coEnum, "enum" },
+        { coEnums, "enums" },
+        { coPointsGroups, "pointsgroups" },
+        { coIntsGroups, "intsgroups" },
+    };
+
+    static std::map<ConfigOptionMode, std::string> mode_map = {
+        { comSimple, "simple" },
+        { comAdvanced, "advanced" },
+        { comDevelop, "develop" }
+    };
+
+    static std::map<ConfigOptionDef::GUIType, std::string> gui_type_map = {
+        { ConfigOptionDef::GUIType::i_enum_open, "i_enum_open" },
+        { ConfigOptionDef::GUIType::f_enum_open, "f_enum_open" },
+        { ConfigOptionDef::GUIType::color, "color" },
+        { ConfigOptionDef::GUIType::select_open, "select_open" },
+        { ConfigOptionDef::GUIType::slider, "slider" },
+        { ConfigOptionDef::GUIType::legend, "legend" },
+        { ConfigOptionDef::GUIType::one_string, "one_string" }
+    };
+
+    auto get_default_value = [&](ConfigOptionDef& opt, ptree& tree) {
+#define SET_VALUE(val) tree.put("default_value", val->serialize())
+
+        if (opt.default_value.get() == nullptr) return;
+        ptree arr_pt;
+        if (opt.nullable) {
+            switch (opt.type) {
+            case coFloats:      SET_VALUE(opt.get_default_value<ConfigOptionFloatsNullable>()); break;
+            case coInts:        SET_VALUE(opt.get_default_value<ConfigOptionIntsNullable>()); break;
+            case coPercents:    SET_VALUE(opt.get_default_value<ConfigOptionPercentsNullable>()); break;
+            case coBools:       SET_VALUE(opt.get_default_value<ConfigOptionBoolsNullable>()); break;
+            default: break;
+            }
+        } else {
+
+            auto get_enum_name = [](ConfigOptionDef& def) {
+                const ConfigOption* option = def.default_value.get();
+                int idx = 0;
+                if (auto* enum_opt = dynamic_cast<const ConfigOptionEnumGeneric*>(option)) {
+                    idx = enum_opt->getInt();
+                } else if (auto* enums_opt = dynamic_cast<const ConfigOptionEnumsGeneric*>(option)) {
+                    const auto& vals = enums_opt->values;
+                    if (vals.size() == 1)
+                        idx = vals[0];
+                    else
+                        throw ConfigurationError("More than one enum values");
+                } else {
+                    idx = option->getInt();
+                }
+
+                if (def.enum_keys_map)
+                    return enum_names_from_keys_map(*def.enum_keys_map)[idx];
+                if (idx < def.enum_values.size())
+                    return def.enum_values[idx];
+
+                throw ConfigurationError("");
+            };
+
+            switch (opt.type) {
+            case coFloat:           SET_VALUE(opt.get_default_value<ConfigOptionFloat>()); break;
+            case coFloats:          SET_VALUE(opt.get_default_value<ConfigOptionFloats>()); break;
+            case coInt:             SET_VALUE(opt.get_default_value<ConfigOptionInt>()); break;
+            case coInts:            SET_VALUE(opt.get_default_value<ConfigOptionInts>()); break;
+            case coString:          SET_VALUE(opt.get_default_value<ConfigOptionString>()); break;
+            case coStrings:         SET_VALUE(opt.get_default_value<ConfigOptionStrings>()); break;
+            case coPercent:         SET_VALUE(opt.get_default_value<ConfigOptionPercent>()); break;
+            case coPercents:        SET_VALUE(opt.get_default_value<ConfigOptionPercents>()); break;
+            case coFloatOrPercent:  SET_VALUE(opt.get_default_value<ConfigOptionFloatOrPercent>()); break;
+            case coPoint:           SET_VALUE(opt.get_default_value<ConfigOptionPoint>()); break;
+            case coPoints:          SET_VALUE(opt.get_default_value<ConfigOptionPoints>()); break;
+            case coPoint3:          SET_VALUE(opt.get_default_value<ConfigOptionPoint3>()); break;
+            case coBool:            SET_VALUE(opt.get_default_value<ConfigOptionBool>()); break;
+            case coBools:           SET_VALUE(opt.get_default_value<ConfigOptionBools>()); break;
+            case coEnum:            tree.put("default_value", get_enum_name(opt)); break;
+            case coEnums:           tree.put("default_value", get_enum_name(opt)); break;
+            case coPointsGroups:    SET_VALUE(opt.get_default_value<ConfigOptionPointsGroups>()); break;
+            case coIntsGroups:      SET_VALUE(opt.get_default_value<ConfigOptionIntsGroups>()); break;
+            default: break;
+            }
+		}
+#undef SET_VALUE
+    };
+
+    auto program_parent_dir = boost::dll::program_location().parent_path();
+    auto images_dir = program_parent_dir;
+#ifdef __linux__
+    images_dir = images_dir.parent_path();
+#endif
+    images_dir = images_dir / "resources" / "images";
+
+    ptree pt;
+    for (auto& [opt_key, opt] : this->options) {
+        if (opt.printer_technology == ptSLA) continue;
+
+        auto& opt_pt = pt.put_child(opt_key, ptree());
+
+        opt_pt.put("type", type_map[opt.type]);
+        opt_pt.put("label", opt.label);
+        if (!opt.full_label.empty())
+            opt_pt.put("full_label", opt.full_label);
+        opt_pt.put("tooltip", opt.tooltip);
+        if (!opt.sidetext.empty())
+            opt_pt.put("sidetext", opt.sidetext);
+        if (opt.type == coEnum || opt.type == coEnums) {
+            put_array(opt_pt, "enum_values", opt.enum_values);
+            put_array(opt_pt, "enum_labels", opt.enum_labels);
+
+            // Get enum icon data
+            std::vector<ptree> icon_values;
+            int valid_icons = 0;
+            for (auto& enum_value : opt.enum_values) {
+                auto filename = "param_" + enum_value + ".svg";
+                auto& this_icon_pt = icon_values.emplace_back();
+                if (auto icon_path = images_dir / filename; exists(icon_path)) {
+                    this_icon_pt.put("icon_filename", filename);
+                    std::ifstream icon_fstream(icon_path.string());
+                    if (!icon_fstream.is_open())
+                        throw Exception("Unable to open icon file");
+                    std::stringstream data;
+                    data << icon_fstream.rdbuf();
+                    this_icon_pt.put("icon_svg_data", data.str());
+                    valid_icons++;
+                } else {
+                    this_icon_pt.put_value("null");
+                }
+            }
+            if (valid_icons > 0) {
+                auto& arr_pt = opt_pt.put_child("enum_icons", ptree());
+                for (auto& val : icon_values)
+                    arr_pt.add_child("", val);
+            }
+        }
+        if (opt.min != INT_MIN)
+            opt_pt.put("min", opt.min);
+        if (opt.max != INT_MAX)
+            opt_pt.put("max", opt.max);
+        if (opt.full_width)
+            opt_pt.put("full_width", opt.full_width);
+        if (opt.multiline)
+            opt_pt.put("multiline", opt.multiline);
+        if (opt.height != -1)
+            opt_pt.put("height", opt.height);
+        if (opt.width != -1)
+            opt_pt.put("width", opt.width);
+        if (opt.readonly)
+            opt_pt.put("readonly", opt.readonly);
+        if (opt.gui_type != ConfigOptionDef::GUIType::undefined)
+            opt_pt.put("gui_type", gui_type_map[opt.gui_type]);
+        opt_pt.put("mode", mode_map[opt.mode]);
+        if (opt.cli == ConfigOptionDef::nocli)
+            opt_pt.put("nocli", true);
+        get_default_value(opt, opt_pt);
+    }
+    auto path = program_parent_dir / "print_config_def.json";
+    write_json(path.string(), pt);
 }
 
 void PrintConfigDef::init_common_params()
diff --git a/src/libslic3r/PrintConfig.hpp b/src/libslic3r/PrintConfig.hpp
index e9ebb11..6bff618 100644
--- a/src/libslic3r/PrintConfig.hpp
+++ b/src/libslic3r/PrintConfig.hpp
@@ -430,6 +430,8 @@ class PrintConfigDef : public ConfigDef
 public:
     PrintConfigDef();
 
+    void dump_to_json();
+
     static void handle_legacy(t_config_option_key &opt_key, std::string &value);
 
     // Array options growing with the number of extruders
diff --git a/src/slic3r/GUI/I18N.hpp b/src/slic3r/GUI/I18N.hpp
index c80c9a1..27b8ac2 100644
--- a/src/slic3r/GUI/I18N.hpp
+++ b/src/slic3r/GUI/I18N.hpp
@@ -40,11 +40,11 @@
 namespace Slic3r { namespace GUI { 
 
 namespace I18N {
-	inline wxString translate(const char         *s) { return wxGetTranslation(wxString(s, wxConvUTF8)); }
-	inline wxString translate(const wchar_t      *s) { return wxGetTranslation(s); }
-	inline wxString translate(const std::string  &s) { return wxGetTranslation(wxString(s.c_str(), wxConvUTF8)); }
-	inline wxString translate(const std::wstring &s) { return wxGetTranslation(s.c_str()); }
-	inline wxString translate(const wxString     &s) { return wxGetTranslation(s); }
+	inline wxString translate(const char         *s) { return wxString(s, wxConvUTF8); }
+	inline wxString translate(const wchar_t      *s) { return wxString(s); }
+	inline wxString translate(const std::string  &s) { return wxString(s.c_str(), wxConvUTF8); }
+	inline wxString translate(const std::wstring &s) { return wxString(s.c_str()); }
+	inline wxString translate(const wxString     &s) { return s; }
 
 	inline wxString translate(const char         *s, const char 	    *plural, unsigned int n) { return wxGetTranslation(wxString(s, wxConvUTF8), wxString(plural, wxConvUTF8), n); }
 	inline wxString translate(const wchar_t      *s, const wchar_t	    *plural, unsigned int n) { return wxGetTranslation(s, plural, n); }
@@ -52,11 +52,11 @@ namespace I18N {
 	inline wxString translate(const std::wstring &s, const std::wstring &plural, unsigned int n) { return wxGetTranslation(s.c_str(), plural.c_str(), n); }
 	inline wxString translate(const wxString     &s, const wxString     &plural, unsigned int n) { return wxGetTranslation(s, plural, n); }
 
-	inline std::string translate_utf8(const char         *s) { return wxGetTranslation(wxString(s, wxConvUTF8)).ToUTF8().data(); }
-	inline std::string translate_utf8(const wchar_t      *s) { return wxGetTranslation(s).ToUTF8().data(); }
-	inline std::string translate_utf8(const std::string  &s) { return wxGetTranslation(wxString(s.c_str(), wxConvUTF8)).ToUTF8().data(); }
-	inline std::string translate_utf8(const std::wstring &s) { return wxGetTranslation(s.c_str()).ToUTF8().data(); }
-	inline std::string translate_utf8(const wxString     &s) { return wxGetTranslation(s).ToUTF8().data(); }
+	inline std::string translate_utf8(const char         *s) { return wxString(s, wxConvUTF8).ToUTF8().data(); }
+	inline std::string translate_utf8(const wchar_t      *s) { return wxString(s).ToUTF8().data(); }
+	inline std::string translate_utf8(const std::string  &s) { return wxString(s.c_str(), wxConvUTF8).ToUTF8().data(); }
+	inline std::string translate_utf8(const std::wstring &s) { return wxString(s.c_str()).ToUTF8().data(); }
+	inline std::string translate_utf8(const wxString     &s) { return s.ToUTF8().data(); }
 
 	inline std::string translate_utf8(const char         *s, const char 	    *plural, unsigned int n) { return translate(s, plural, n).ToUTF8().data(); }
 	inline std::string translate_utf8(const wchar_t      *s, const wchar_t	    *plural, unsigned int n) { return translate(s, plural, n).ToUTF8().data(); }
diff --git a/src/slic3r/GUI/MainFrame.cpp b/src/slic3r/GUI/MainFrame.cpp
index 82121c3..b3cc3e9 100644
--- a/src/slic3r/GUI/MainFrame.cpp
+++ b/src/slic3r/GUI/MainFrame.cpp
@@ -1425,6 +1425,10 @@ void MainFrame::create_preset_tabs()
     //add_created_tab(new TabSLAMaterial(m_param_panel));
     add_created_tab(new TabPrinter(m_param_dialog->panel()), "printer");
 
+    wxGetApp().plater()->get_partplate_list().load_bedtype_textures();
+
+    exit(0);
+
     m_param_panel->rebuild_panels();
     m_param_dialog->panel()->rebuild_panels();
     //m_tabpanel->AddPage(m_param_panel, "Parameters", "notebook_presets_active");
diff --git a/src/slic3r/GUI/PartPlate.cpp b/src/slic3r/GUI/PartPlate.cpp
index 99ba7a3..9b45b86 100644
--- a/src/slic3r/GUI/PartPlate.cpp
+++ b/src/slic3r/GUI/PartPlate.cpp
@@ -39,6 +39,8 @@
 #include "format.hpp"
 #include <imgui/imgui_internal.h>
 #include <wx/dcgraph.h>
+
+#include "boost/dll/runtime_symbol_info.hpp"
 using boost::optional;
 namespace fs = boost::filesystem;
 
@@ -6261,7 +6263,9 @@ void PartPlateList::BedTextureInfo::reset()
         parts[i].reset();
 }
 
-void PartPlateList::init_bed_type_info()
+bool PartPlateList::bed_textures_dumped = false;
+
+void PartPlateList::init_bed_type_info(bool is_single_extruder)
 {
     BedTextureInfo::TexturePart st_part1(10, 52, 8.393f, 192, "bbl_bed_st_left.svg");
     BedTextureInfo::TexturePart st_part2(74, -10, 148, 12, "bbl_bed_st_bottom.svg");
@@ -6298,7 +6302,8 @@ void PartPlateList::init_bed_type_info()
             }
         }
     }
-    auto is_single_extruder = wxGetApp().preset_bundle->get_printer_extruder_count() == 1;
+	if (bed_textures_dumped)
+		is_single_extruder = wxGetApp().preset_bundle->get_printer_extruder_count() == 1;
     if (!is_single_extruder) {
         m_allow_bed_type_in_double_nozzle.clear();
         pte_part1 = BedTextureInfo::TexturePart(57, 300, 236.12f, 10.f, "bbl_bed_pte_middle.svg");
@@ -6340,6 +6345,9 @@ void PartPlateList::init_bed_type_info()
 	bed_texture_info[btPTE].parts.push_back(pte_part1);
 	bed_texture_info[btPTE].parts.push_back(pte_part2);
 
+	if (!bed_textures_dumped)
+		return;
+
 	auto  bed_ext     = get_extents(m_shape);
 	int   bed_width   = bed_ext.size()(0);
 	int   bed_height  = bed_ext.size()(1);
@@ -6455,6 +6463,66 @@ void PartPlateList::load_bedtype_textures()
 {
 	if (PartPlateList::is_load_bedtype_textures) return;
 
+	if (!bed_textures_dumped) {
+		using boost::property_tree::ptree;
+
+		static std::map<BedType, std::string> bt_map = {
+			{ btPC, "pc"},
+			{ btEP, "ep"},
+			{ btPEI, "pei"},
+			{ btPTE, "pte"},
+			{ btSuperTack, "supertack"},
+		};
+
+		if ((BedType::btCount - 1) != bt_map.size())
+			throw Exception("The number of bed types does not match the bed type map");
+
+		auto export_bed_data = [&](ptree& parent_pt, int index) {
+			auto& bed_pt = parent_pt.add_child(bt_map[static_cast<BedType>(index)], ptree());
+			for (auto& part : bed_texture_info[index].parts) {
+				auto& part_pt = bed_pt.add_child("", ptree());
+				part_pt.add("filename", part.filename);
+
+				std::string filename = resources_dir() + "/images/" + part.filename;
+				if (!boost::filesystem::exists(filename))
+					throw Exception("A parts file does not exist");
+
+				std::ifstream part_fstream(filename);
+				if (!part_fstream.is_open())
+					throw Exception("Unable to open part file");
+				std::stringstream data;
+				data << part_fstream.rdbuf();
+				part_pt.add("svg_data", data.str());
+
+				part_pt.add("x", part.x);
+				part_pt.add("y", part.y);
+				part_pt.add("w", part.w);
+				part_pt.add("h", part.h);
+			}
+		};
+
+		ptree pt;
+		init_bed_type_info();
+
+		auto& single_extruder_pt = pt.add_child("single_extruder", ptree());
+		for (int i = 1; i < static_cast<unsigned int>(btCount); ++i)
+			export_bed_data(single_extruder_pt, i);
+
+		init_bed_type_info(false);
+
+		auto& dual_extruder_pt = pt.add_child("dual_extruder", ptree());
+		for (int i = 1; i < static_cast<unsigned int>(btCount); ++i) {
+			if (m_allow_bed_type_in_double_nozzle.count(i) == 0 || !m_allow_bed_type_in_double_nozzle[i])
+				continue;
+			export_bed_data(dual_extruder_pt, i);
+		}
+
+		auto path = boost::dll::program_location().parent_path() / "bed_textures.json";
+		write_json(path.string(), pt);
+
+		bed_textures_dumped = true;
+	}
+
 	init_bed_type_info();
 	GLint max_tex_size = OpenGLManager::get_gl_info().get_max_tex_size();
 	GLint logo_tex_size = (max_tex_size < 2048) ? max_tex_size : 2048;
diff --git a/src/slic3r/GUI/PartPlate.hpp b/src/slic3r/GUI/PartPlate.hpp
index 9750b5a..db79d03 100644
--- a/src/slic3r/GUI/PartPlate.hpp
+++ b/src/slic3r/GUI/PartPlate.hpp
@@ -954,7 +954,8 @@ public:
         int h;
     };
     bool calc_extruder_only_area(Rect &left_only_rect, Rect &right_only_rect);
-    void init_bed_type_info();
+    static bool bed_textures_dumped;
+    void init_bed_type_info(bool is_single_extruder = true);
     bool init_extruder_only_area_info();
     void load_bedtype_textures();
     void load_extruder_only_area_textures();
diff --git a/src/slic3r/GUI/Tab.cpp b/src/slic3r/GUI/Tab.cpp
index e245874..29d8adc 100644
--- a/src/slic3r/GUI/Tab.cpp
+++ b/src/slic3r/GUI/Tab.cpp
@@ -24,6 +24,7 @@
 
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/algorithm/string/replace.hpp>
+#include <boost/dll/runtime_symbol_info.hpp>
 #include "wxExtensions.hpp"
 #include "PresetComboBoxes.hpp"
 #include <wx/wupdlock.h>
@@ -567,6 +568,8 @@ void Tab::create_preset_tab()
     // Initialize the DynamicPrintConfig by default keys/values.
     build();
 
+    dump_to_json();
+
     // ys_FIXME: Following should not be needed, the function will be called later
     // (update_mode->update_visibility->rebuild_page_tree). This does not work, during the
     // second call of rebuild_page_tree m_tabctrl->GetFirstVisibleItem(); returns zero
@@ -576,6 +579,67 @@ void Tab::create_preset_tab()
     m_completed = true;
 }
 
+void Tab::dump_to_json()
+{
+    using boost::property_tree::ptree;
+
+    auto& this_type = typeid(*this);
+    auto& filament_type = typeid(TabFilament);
+    auto& printer_type  = typeid(TabPrinter);
+    auto& print_type = typeid(TabPrint);
+    if (this_type != filament_type && this_type != printer_type && this_type != print_type)
+        return;
+
+    ptree pt;
+    ptree icon_data_pt;
+    for (const auto& page : m_pages) {
+        auto& page_pt = pt.put_child(page->title().ToStdString(), ptree());
+        for (const auto& optgroup : page->m_optgroups) {
+            const auto& title = optgroup->title.ToStdString();
+            auto& optgroup_pt = page_pt.put_child(title, ptree());
+
+            // Get option group icon
+            auto icon_filename = optgroup->icon.ToStdString();
+            if (!icon_filename.empty()) {
+                boost::replace_last(icon_filename, ".png", "");
+                icon_filename += ".svg";
+                auto icon_path = Slic3r::var(icon_filename);
+                if (icon_path != icon_filename) {
+                    auto& this_icon_pt = icon_data_pt.put_child(title, ptree());
+                    this_icon_pt.put("icon_filename", icon_filename);
+                    std::ifstream icon_fstream(icon_path);
+                    if (!icon_fstream.is_open())
+                        throw Exception("Unable to open icon file");
+                    std::stringstream data;
+                    data << icon_fstream.rdbuf();
+                    this_icon_pt.put("icon_svg_data", data.str());
+                }
+            }
+
+            for (auto& line : optgroup->get_lines()) {
+                std::vector<std::string> option_ids;
+                for (auto& option : line.get_options())
+                    option_ids.emplace_back(option.opt_id);
+                if (option_ids.size() == 1)
+                    optgroup_pt.add("", option_ids[0]);
+                else if (option_ids.size() > 1) {
+                    auto& line_pt = optgroup_pt.add_child("", ptree());
+                    line_pt.put("label", line.label.ToStdString());
+                    line_pt.put("tooltip", line.label_tooltip.ToStdString());
+                    auto& options_pt = line_pt.put_child("options", ptree());
+                    for (auto& id : option_ids)
+                        options_pt.add("", id);
+                }
+            }
+        }
+    }
+
+    pt.put_child("icon_data", icon_data_pt);
+
+    auto path = boost::dll::program_location().parent_path() / this->m_title.Lower().ToStdString().append(".json");
+    write_json(path.string(), pt);
+}
+
 void Tab::add_scaled_button(wxWindow* parent,
                             ScalableButton** btn,
                             const std::string& icon_name,
diff --git a/src/slic3r/GUI/Tab.hpp b/src/slic3r/GUI/Tab.hpp
index 53e8ada..043f113 100644
--- a/src/slic3r/GUI/Tab.hpp
+++ b/src/slic3r/GUI/Tab.hpp
@@ -322,6 +322,7 @@ public:
 	virtual bool supports_printer_technology(const PrinterTechnology tech) const = 0;
 
 	void		create_preset_tab();
+    void        dump_to_json();
     void        add_scaled_button(wxWindow* parent, ScalableButton** btn, const std::string& icon_name,
                                   const wxString& label = wxEmptyString,
                                   long style = wxBU_EXACTFIT | wxNO_BORDER);
